// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole  @default(USER)
  accounts           Account[]
  isTwoFactorEnabled Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// Subscription and Pricing Models

model SubscriptionTier {
  id                String   @id @default(cuid())
  name              String   // basic, premium, enterprise
  description       String
  monthlyPrice      Int     // Price in cents
  annualPrice       Int     // Price in cents
  maxStudents       Int
  maxTeachers       Int
  maxClasses        Int
  features          String[] // Array of feature identifiers
  isActive          Boolean  @default(true)
  
  // Stripe integration
  monthlyPriceStripeId String? @unique
  yearlyPriceStripeId  String? @unique
  
  // Subscription relationships
  subscriptions     Subscription[]
  discounts         Discount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscription_tiers")
}

model Discount {
  id                String   @id @default(cuid())
  schoolId          String
  tierId            String
  code              String   @unique
  type              String   // percentage, fixed
  value             Int      // Percentage or fixed amount in cents
  description       String
  validFrom         DateTime
  validUntil        DateTime
  maxUses           Int?     // Optional maximum number of uses
  currentUses       Int      @default(0)
  isActive          Boolean  @default(true)

  // Relationships
  school            School           @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  subscriptionTier  SubscriptionTier @relation(fields: [tierId], references: [id])
  appliedDiscounts  AppliedDiscount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, code])
  @@map("discounts")
}

model AppliedDiscount {
  id          String   @id @default(cuid())
  schoolId    String
  discountId  String
  invoiceId   String
  amount      Int      // Amount saved in cents
  appliedAt   DateTime @default(now())

  // Relationships
  school      School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  discount    Discount @relation(fields: [discountId], references: [id])
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])

  @@map("applied_discounts")
}
